# HIP-60 : One Miner, One Vote

- Author(s): @cvolkernick
- Start Date: 2022-04-28
- Category: Governance
- Original HIP PR: <!-- leave this empty; maintainer will fill in ID of this pull request -->
- Tracking Issue: <!-- leave this empty; maintainer will create a discussion issue -->

# Summary
[summary]: #summary

Currently HIP votes are conducted via wallet signatures at heliumvote.com; this proposal suggests further improvement
by allowing/constraining a given wallet's voting power to equal the total number of hotspots (unique b58 addresses) in said wallet.


# Motivation
[motivation]: #motivation

There is a need to further constrain the HIP voting process such that influence in vote cannot be "bought" by simply holding large ballances
in wallets. Ideally voting should at a minimum use a 1:1 correlation between participant stake in the network (i.e. each hotspot purchased /
onboarded).

HIP votes originated as extremely limited scope straw polls, typically conducted and voted upon by the most active of community members
via Discord. This was extremely limited in scope of awareness, and obviously lacked any "official" process, or really any way to verify the
legitimacy of each vote.

The voting mechanism has since been improved greatly in awareness and security of vote simply by implementing a
public voting location and messaging through official, vastly more visible channels when and where these votes occur -- along with relevant
context resources explaining each vote and its implications.

Using private key signatures to cast votes is also a step up in loosely connecting
partication in the network via some unique identifier (wallet address / DC burn), however there is no cost to create additional wallets and the
DC burn required to cast a vote with each wallet is relatively trivial.

Tying voting power to number on onboarded hotspots on the wallet voting provides a fair and logical basis and "stake" in the vote, which mirrors
the voting party's stake in the network (one could argue validators could/should be included here, however it may also be argued that their "stakes"
are governed separately by consensus protocol).

# Stakeholders
[stakeholders]: #stakeholders

All hotspot owners [and potentially validators depending on general consesnsus to be determined by discussion within the community].

* Who is affected by this HIP?

* How are we soliciting feedback on this HIP from these stakeholders? Note that
  they may not be watching the HIPs repository or even aren't directly active in
  the Helium Community Slack channels.

# Detailed Explanation
[detailed-explanation]: #detailed-explanation

- Introduce and explain new concepts.

- It should be reasonably clear how the proposal would be implemented.

- Provide representative examples that show how this proposal would be commonly
  used.

- Corner cases should be dissected by example.

# Drawbacks
[drawbacks]: #drawbacks

- Why should we *not* do this?

# Rationale and Alternatives
[alternatives]: #rationale-and-alternatives

This is your chance to discuss your proposal in the context of the whole design
space. This is probably the most important section!

- Why is this design the best in the space of possible designs?

- What other designs have been considered and what is the rationale for not
  choosing them?

- What is the impact of not doing this?

# Unresolved Questions
[unresolved]: #unresolved-questions

- What parts of the design do you expect to resolve through the HIP process
  before this gets merged?

- What parts of the design do you expect to resolve through the implementation
  of this feature?

- What related issues do you consider out of scope for this HIP that could be
  addressed in the future independently of the solution that comes out of this
  HIP?

# Deployment Impact
[deployment-impact]: #deployment-impact

Describe how this design will be deployed and any potential impact it may have on
current users of this project.

- How will current users be impacted?

- How will existing documentation/knowlegebase need to be supported?

- Is this backwards compatible?

        - If not, what is the procedure to migrate?

# Success Metrics
[success-metrics]: #success-metrics

What metrics can be used to measure the success of this design?

- What should we measure to prove a performance increase?

- What should we measure to prove an improvement in stability?

- What should we measure to prove a reduction in complexity?

- What should we measure to prove an acceptance of this by it's users?
